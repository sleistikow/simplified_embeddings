import json
import math

import numpy as np

from distancematrix import DistanceMatrix
from techniques.classicalmds import ClassicalMdsEmbedding
from transformation import transform_1st_pc_over_time
from utils import distance_matrix_from_projection, euclidean_distance, generate_bump_curve, \
    generate_loop_curve
from plotting import plot



def load_asevis(path, max_num_timesteps=None, nth=1):
    print('[Preprocessing] Loading ' + path)

    dm = DistanceMatrix()

    dm.member_names = []
    dm.num_time_steps = []
    dm.time_points = []

    data = []

    import os

    for member in sorted(os.listdir(path)):
        if os.path.isdir(os.path.join(path, member)):

            time_file_path = os.path.join(path, member, 'times.txt')
            if not os.path.isfile(time_file_path):
                continue

            time_points = np.loadtxt(time_file_path)
            num_time_steps = min(time_points.shape[0], max_num_timesteps)
            dm.time_points.append(time_points[-num_time_steps::nth])
            dm.num_time_steps.append(int(num_time_steps / nth))
            dm.member_names.append(member)

            files = os.listdir(os.path.join(path, member))
            files.sort()
            files = [os.path.join(path, member, file) for file in files if file.startswith('orientation')]

            particles = []
            for file in files:
                time_steps = np.loadtxt(file)
                time_steps = time_steps[-num_time_steps::nth, :]
                particles.append(time_steps)

            stacked_particles = np.column_stack(particles)
            data.append(stacked_particles)

    data = np.concatenate(data, axis=0)
    dm.matrix = distance_matrix_from_projection(data)

    return dm


def load_ucl_har(path):
    print('[Preprocessing] Loading ' + path)

    import os
    x_train = np.loadtxt(os.path.join(path, 'train', 'X_train.txt'))
    # y_train = np.loadtxt(os.path.join(path, 'train', 'y_train.txt'))
    subject_train = np.loadtxt(os.path.join(path, 'train', 'subject_train.txt'))

    subject_data = []
    
    dm = DistanceMatrix()

    dm.member_names = []
    dm.num_time_steps = []
    for i in range(1, 31):
        d = x_train[subject_train == i]
        if d.shape[0] > 0:
            subject_data.append(d)
            dm.member_names.append(f'Subject {i}')
            dm.num_time_steps.append(d.shape[0])

    dm.matrix = distance_matrix_from_projection(x_train)

    return dm


def load_vsm(file):
    print('[Preprocessing] Loading ' + file)

    with open(file) as json_file:
        similarity = json.load(json_file)['similarity']

    if similarity is None:
        print(f'Loading {file} failed')
        return

    matrices = similarity['matrices'][0]

    dm = DistanceMatrix()
    dm.num_time_steps = similarity['numTimeSteps']
    dm.member_names = similarity['memberNames']

    unused_field_name = matrices['key']

    size = matrices['value']['size']
    data = matrices['value']['data']

    distance_matrix = np.zeros((size, size))
    distance_matrix[np.triu_indices(size, k=0)] = data
    distance_matrix = distance_matrix + distance_matrix.T - np.diag(np.diag(distance_matrix))

    dm.matrix = distance_matrix

    return dm


def init_toy_2D(num_time_steps=20, num_functions=3, plot_data=False):
    print('[Preprocessing] Init toy 2D example')

    num_members = num_functions

    dm = DistanceMatrix()

    dm.num_time_steps = [num_time_steps for _ in range(num_members)]

    x_values = np.linspace(-1, 1, num=num_time_steps)

    # Calculate y values
    ys = []
    ys.append(x_values)
    ys.append(x_values ** 2)
    ys.append(x_values ** 3 + 0.2 * x_values ** 2 + 1)

    names = ['$f_1(x)=x$', '$f_2(x)=x^2$', '$f_3(x)=x^3+0.2x^2+1$']

    for i in range(3, num_members):
        ys.append(x_values ** (i + 1) + (i - 1) * ((-1) ** i))
        names.append(f'$f_{i}$')

    ys = ys[:num_members]

    points = []
    for i in range(len(ys)):
        points.append(np.column_stack((x_values, ys[i])))

    p = np.concatenate(points, axis=0)

    dm.member_names = names[:num_members]
    dm.matrix = distance_matrix_from_projection(p)

    if plot_data:
        import matplotlib.pyplot as plt
        fig = plt.figure()
        ax = fig.add_subplot(111)
        for i in range(len(ys)):
            ax.plot(points[i][:, 0], points[i][:, 1], label=dm.member_names[i])
        plt.show()

    dm.raw_data = p.T

    return dm


def init_debug_detach(num_time_steps=20, num_functions=5, plot_data=False):
    print('[Preprocessing] Init debug detach example')

    num_members = num_functions

    dm = DistanceMatrix()

    dm.num_time_steps = [num_time_steps for _ in range(num_members)]

    x_values = np.linspace(0, 1, num=num_time_steps)

    # Calculate y values
    ys = []
    ys.append(np.exp(x_values))
    ys.append(np.exp(2 * x_values))
    ys.append(np.exp(3 * x_values))
    ys.append(np.exp(4 * x_values))
    ys.append(np.exp(5 * x_values))

    names = ['$f_1(x)=e^x$', '$f_2(x)=e^{2x}$', '$f_3(x)=e^{3x}$', '$f_4(x)=e^{4x}$', '$f_4(x)=e^{5x}$']

    for i in range(3, num_members):
        ys.append(x_values ** (i + 1) + (i - 1) * ((-1) ** i))
        names.append(f'$f_{i}$')

    ys = ys[:num_members]

    points = []
    for i in range(len(ys)):
        points.append(np.column_stack((x_values, ys[i])))

    p = np.concatenate(points, axis=0)

    dm.member_names = names[:num_members]
    dm.matrix = distance_matrix_from_projection(p)

    if plot_data:
        import matplotlib.pyplot as plt
        fig = plt.figure()
        ax = fig.add_subplot(111)
        for i in range(len(ys)):
            ax.plot(points[i][:, 0], points[i][:, 1], label=dm.member_names[i])
        plt.show()

    dm.raw_data = p.T

    return dm


def init_debug_parallel(num_time_steps=20, reference_has_feature=False, feature_radius=0.2):
    print('[Preprocessing] Init debug parallel example')

    num_functions = 3
    num_members = num_functions + num_functions

    dm = DistanceMatrix()
    dm.num_time_steps = [num_time_steps for _ in range(num_members)]
    dm.member_names = []

    # Create the loop and scale it.
    loop = generate_loop_curve(num_time_steps, feature_radius)
    loop[:, 0] *= 2
    loop[:, 0] -= 1

    points = []
    for i, offset in enumerate([-1, 0, 1]):
        dm.member_names.append(f'h_{i}')
        xs = np.linspace(-1, 1, num=num_time_steps)
        ys = [offset] * num_time_steps
        points.append(np.column_stack((xs, ys)))

    if reference_has_feature:
        points[1] = loop.copy()

    # Overwrite the last curve to contain a loop.
    points[0] = loop.copy()
    points[0][:, 1] -= 1

    for i, offset in enumerate([-1, 0, 1]):
        dm.member_names.append(f'v_{i}')
        xs = [offset] * num_time_steps
        ys = np.linspace(-1, 1, num=num_time_steps)
        points.append(np.column_stack((xs, ys)))

    # Overwrite the last curve to contain a loop.
    points[-1] = np.array([-loop.T[1] + 1, loop.T[0]]).T

    p = np.concatenate(points, axis=0)

    dm.matrix = distance_matrix_from_projection(p)

    dm.raw_data = p.T

    return dm


def init_illustrative_dataset(num_time_steps=20, feature_radius=0.1, noise=0.0):
    print('[Preprocessing] Init illustrative example')

    num_members = 4

    dm = DistanceMatrix()

    dm.time_points = [[i for i in range(num_time_steps)] for _ in range(num_members)]
    dm.num_time_steps = [num_time_steps for _ in range(num_members)]
    dm.member_names = []

    points = []

    # Horizontal curve.
    dm.member_names.append('h')
    xs = np.linspace(-1, 1, num=num_time_steps)
    ys = [1] * num_time_steps
    points.append(np.column_stack((xs, ys)))

    # Horizontal loop.
    dm.member_names.append('$h_{loop}$')

    loop = generate_bump_curve(num_time_steps, feature_radius, l=0.2)
    loop[:, 1] -= 1

    if noise > 0:
        loop[:, 1] += np.random.normal(0, noise, loop[:, 1].shape)

    # loop = generate_loop_curve(num_time_steps, feature_radius)
    # loop[:, 0] *= 2
    # loop[:, 0] -= 1
    # loop[:, 1] -= 1

    points.append(loop)

    # Declined curve.
    dm.member_names.append('d')
    xs = np.linspace(-1, 1, num=num_time_steps)
    ys = np.linspace(-1, 1, num=num_time_steps)
    points.append(np.column_stack((xs, ys)))

    # Overwrite the last curve to contain a loop.
    dm.member_names.append('$d_{loop}$')
    d_loop = np.array([-loop.T[1], loop.T[0]]).T * math.sqrt(2)

    angle = np.pi + np.pi / 4
    R = np.array([[np.cos(angle), -np.sin(angle)],
                  [np.sin(angle), np.cos(angle)]])

    d_loop = np.dot(d_loop, R.T)
    d_loop[:, 0] += 1
    d_loop[:, 1] += 1
    points.append(d_loop)
    # xs = np.linspace(-1, 1, num=num_time_steps)
    # ys = np.linspace(1, -1, num=num_time_steps)
    # points.append(np.column_stack((xs, ys)))

    p = np.concatenate(points, axis=0)

    dm.matrix = distance_matrix_from_projection(p)

    dm.raw_data = p.T

    return dm


def init_toy_3D(plot_data=False):
    print('[Preprocessing] Init toy 3D example')

    num_timesteps = 40

    # Helix parameters.
    a = 1
    b = 0.25
    t_max = 1 * np.pi

    # Calculate the (x, y, z) coordinates for the helix.
    t = np.linspace(0, t_max, num_timesteps)
    x = a * np.cos(t)
    y = a * np.sin(t)
    z = b * t

    def helix(t):
        return x[t], y[t], z[t]

    def line(t):
        return 0, 0, -z[t]

    functions = [line, helix]
    names = {0: 'line', 1: 'helix'}

    num_members = len(functions)

    n = num_members * num_timesteps

    dm = DistanceMatrix()
    dm.matrix = np.zeros((n, n))

    dm.member_names = []
    dm.num_time_steps = []

    coordinates = [[] for _ in range(num_members)]

    for i0 in range(num_members):
        if i0 in names:
            dm.member_names.append(names[i0])
        else:
            dm.member_names.append(str(functions[i0]))
        dm.num_time_steps.append(num_timesteps)
        for j0 in range(num_timesteps):

            p0 = functions[i0](j0)
            coordinates[i0].append(p0)

            for i1 in range(num_members):
                for j1 in range(num_timesteps):
                    index0 = i0 * num_timesteps + j0
                    index1 = i1 * num_timesteps + j1

                    p1 = functions[i1](j1)

                    dm.matrix[index0][index1] = euclidean_distance(p0, p1)

    if plot_data:
        import matplotlib.pyplot as plt
        fig = plt.figure()
        ax = fig.add_subplot(111, projection='3d')
        for i in range(num_members):
            x, y, z = zip(*coordinates[i])
            ax.plot(x, y, z, label=dm.member_names[i])
        plt.show()

    return dm



def plot_1d_over_time(matrix):
    proj = ClassicalMdsEmbedding(matrix, 1).project()
    time_proj = transform_1st_pc_over_time(proj, matrix, None)
    plot(time_proj, matrix, None, title='Pulmonary Hypertension', plotting=True, interactive=False, markers=True)
    exit(0)


def prepare_ph_data():
    matrix = load_vsm('data/similarity_ph_magnitude.vsm')
    matrix.time_points = [
        [0.000000,0.010000,0.020000,0.030000,0.040000,0.050000,0.060000,0.070000,0.080000,0.090000,0.100000],
        [0.000000,0.005000,0.010000,0.015000,0.020000,0.025000,0.030000,0.035000,0.040000,0.045000,0.050000,0.055000,0.060000,0.065000,0.070000,0.075000,0.080000,0.085000,0.090000,0.095000,0.100000,0.105000,0.110000,0.115000,0.120000,0.125000,0.130000,0.135000,0.140000,0.145000,0.150000,0.155000,0.160000,0.165000,0.170000,0.175000,0.180000,0.185000,0.190000,0.195000,0.200000,0.205000,0.210000,0.215000,0.220000,0.225000,0.230000,0.235000,0.240000,0.245000,0.250000,0.255000,0.260000,0.265000,0.270000,0.275000,0.280000,0.285000,0.290000,0.295000,0.300000],
        [0.000000,0.005000,0.010000,0.015000,0.020000,0.025000,0.030000,0.035000,0.040000,0.045000,0.050000,0.055000,0.060000,0.065000,0.070000,0.075000,0.080000,0.085000,0.090000,0.095000,0.100000,0.105000,0.110000,0.115000,0.120000,0.125000,0.130000,0.135000,0.140000,0.145000,0.150000,0.155000,0.160000,0.165000,0.170000,0.175000,0.180000,0.185000,0.190000,0.195000,0.200000,0.205000,0.210000,0.215000,0.220000,0.225000,0.230000,0.235000,0.240000,0.245000,0.250000,0.255000,0.260000,0.265000,0.270000,0.275000,0.280000,0.285000,0.290000,0.295000,0.300000],
        [0.000000,0.005000,0.010000,0.015000,0.020000,0.025000,0.030000,0.035000,0.040000,0.045000,0.050000,0.055000,0.060000,0.065000,0.070000,0.075000,0.080000,0.085000,0.090000,0.095000,0.100000,0.105000,0.110000,0.115000,0.120000,0.125000,0.130000,0.135000,0.140000,0.145000,0.150000,0.155000,0.160000,0.165000,0.170000,0.175000,0.180000,0.185000,0.190000,0.195000,0.200000,0.205000,0.210000,0.215000,0.220000,0.225000,0.230000,0.235000,0.240000,0.245000,0.250000,0.255000,0.260000,0.265000,0.270000,0.275000,0.280000,0.285000,0.290000,0.295000,0.300000],
        [0.000000,0.005000,0.010000,0.015000,0.020000,0.025000,0.030000,0.035000,0.040000,0.045000,0.050000,0.055000,0.060000,0.065000,0.070000,0.075000,0.080000,0.085000,0.090000,0.095000,0.100000,0.105000,0.110000,0.115000,0.120000,0.125000,0.130000,0.135000,0.140000,0.145000,0.150000,0.155000,0.160000,0.165000,0.170000,0.175000,0.180000,0.185000,0.190000,0.195000,0.200000,0.205000,0.210000,0.215000,0.220000,0.225000,0.230000,0.235000,0.240000,0.245000,0.250000,0.255000,0.260000,0.265000,0.270000,0.275000,0.280000,0.285000,0.290000,0.295000,0.300000],
        [0.000000,0.005000,0.010000,0.015000,0.020000,0.025000,0.030000,0.035000,0.040000,0.045000,0.050000,0.055000,0.060000,0.065000,0.070000,0.075000,0.080000,0.085000,0.090000,0.095000,0.100000,0.105000,0.110000,0.115000,0.120000,0.125000,0.130000,0.135000,0.140000,0.145000,0.150000,0.155000,0.160000,0.165000,0.170000,0.175000,0.180000,0.185000,0.190000,0.195000,0.200000,0.205000,0.210000,0.215000,0.220000,0.225000,0.230000,0.235000,0.240000,0.245000,0.250000,0.255000,0.260000,0.265000,0.270000,0.275000,0.280000,0.285000,0.290000,0.295000,0.300000],
        [0.000000,0.005000,0.010000,0.015000,0.020000,0.025000,0.030000,0.035000,0.040000,0.045000,0.050000,0.055000,0.060000,0.065000,0.070000,0.075000,0.080000,0.085000,0.090000,0.095000,0.100000,0.105000,0.110000,0.115000,0.120000,0.125000,0.130000,0.135000,0.140000,0.145000,0.150000,0.155000,0.160000,0.165000,0.170000,0.175000,0.180000,0.185000,0.190000,0.195000,0.200000,0.205000,0.210000,0.215000,0.220000,0.225000,0.230000,0.235000,0.240000,0.245000,0.250000,0.255000,0.260000,0.265000,0.270000,0.275000,0.280000,0.285000,0.290000,0.295000,0.300000],
        [0.000000,0.004992,0.009984,0.014976,0.019968,0.024960,0.029952,0.034944,0.039936,0.044928,0.049920,0.054912,0.059904,0.064896,0.069888,0.074880,0.079872,0.084864,0.089856,0.094848,0.099840,0.104832,0.109824,0.114816,0.119808,0.124800,0.129792,0.134784,0.139776,0.144768,0.149760,0.154752,0.159744,0.164736,0.169728,0.174720,0.179712,0.184704,0.189696,0.194688,0.199680,0.204672,0.209664,0.214656,0.219648,0.224640,0.229632,0.234624,0.239616,0.244608,0.249600,0.254592,0.259584,0.264576,0.269568,0.274560,0.279552,0.284544,0.289536,0.294528,0.299520],
        [0.000000,0.004992,0.009984,0.014976,0.019968,0.024960,0.029952,0.034944,0.039936,0.044928,0.049920,0.054912,0.059904,0.064896,0.069888,0.074880,0.079872,0.084864,0.089856,0.094848,0.099840,0.104832,0.109824,0.114816,0.119808,0.124800,0.129792,0.134784,0.139776,0.144768,0.149760,0.154752,0.159744,0.164736,0.169728,0.174720,0.179712,0.184704,0.189696,0.194688,0.199680,0.204672,0.209664,0.214656,0.219648,0.224640,0.229632,0.234624,0.239616,0.244608,0.249600,0.254592,0.259584,0.264576,0.269568,0.274560,0.279552,0.284544,0.289536,0.294528,0.299520],
        [0.000000,0.004992,0.009984,0.014976,0.019968,0.024960,0.029952,0.034944,0.039936,0.044928,0.049920,0.054912,0.059904,0.064896,0.069888,0.074880,0.079872,0.084864,0.089856,0.094848,0.099840,0.104832,0.109824,0.114816,0.119808,0.124800,0.129792,0.134784,0.139776,0.144768,0.149760,0.154752,0.159744,0.164736,0.169728,0.174720,0.179712,0.184704,0.189696,0.194688,0.199680,0.204672,0.209664,0.214656,0.219648,0.224640,0.229632,0.234624,0.239616,0.244608,0.249600,0.254592,0.259584,0.264576,0.269568,0.274560,0.279552,0.284544,0.289536,0.294528,0.299520],
    ]
    matrix.resample_time(100)
    matrix.to_file('datasets/pulmonary_hypertension.json')


def prepare_asteroid_dataset():
    matrix = load_vsm('data/similarity_asteroid_v02.vsm')
    matrix.time_points = [[0.000000,0.200072,0.400133,0.600144,0.800001,1.000159,1.200021,1.400088,1.600183,1.800028,2.000262,2.200214,2.400105,2.600308,2.800703,3.000193,3.200670,3.400473,3.600102,3.800824,4.001104,4.200674,4.401077,4.600332,4.800177,5.001104,5.200555,5.401003,5.600162,5.801035,6.001016,6.200255,6.401032,6.600775,6.800827,7.000860,7.201238,7.400078,7.600075,7.800773,8.201721,8.401460,8.600221,8.800025,9.002051,9.201939,9.400855,9.600241,9.801025,10.001780,10.200970,10.402140,10.601250,10.801060,11.001430,11.202040,11.401650,11.600160,11.800980,12.000970,12.201400,12.400770,12.601520,12.800680,13.000360,13.201110,13.600850,13.800100,14.001580,14.200690,14.400940,14.600890,14.800720,15.000730,15.201050,15.400640,15.600600,15.800940,16.000441,16.201000,16.401171,16.600760,16.800690,17.000601,17.200569,17.400339,17.601139,17.800760,18.001209,18.201111,18.400150,18.600830,18.800810,19.000380,19.200621,19.400339,19.601080,19.800100,20.000151,20.200340,20.400049,20.600140,20.801399,21.000340,21.200871,21.400000,21.601280,21.800489,22.000641,22.200850,22.400900,22.600161,22.801279,23.000210,23.200510,23.400000,23.600981,23.800200,24.000429,24.201019,24.400311,24.601049,24.800699,25.001350,25.201191,25.400551,25.600479,25.800850,26.001221,26.200211,26.400551,26.600920,26.801279,27.000130,27.200821,27.400040,27.600189,27.801310,28.000500,28.200741,28.400709,28.601000,28.800739,29.001270,29.201300,29.401220,29.600790,29.801319,30.000629,30.200640,30.401310,30.601049,30.801380,31.000429,31.200411,31.400351,31.600330,31.801069,32.000149,32.200691,32.401482,32.600761,32.800659,33.000381,33.200459,33.401100,33.600521,33.801281,34.001041,34.200951,34.400009,34.601189,34.800030,35.001511,35.201801,35.400188,35.600658,35.800690,36.000622,36.200920,36.400982,36.600449,36.800549,37.001068,37.200310,37.408249,37.606998,37.805199,38.002682,38.207981,38.404179,38.600060,38.803940,39.007359,39.201820,39.404190,39.606041,39.807400,40.008339,40.200600,40.400749,40.600651,40.800171,41.007542,41.206421,41.404812,59.406559,59.602440,60.002361,],[0.000000,0.200153,0.400008,0.600115,0.800101,1.000126,1.200041,1.400036,1.600078,1.800040,2.000070,2.200297,2.400287,2.600010,2.800036,3.000317,3.200200,3.400139,3.600120,3.800135,4.000329,4.200091,4.400642,4.600689,4.800283,5.000505,5.200212,5.400720,5.600589,5.800951,6.001097,6.200896,6.400785,6.600731,6.800060,7.000971,7.200647,7.400151,7.600862,7.801101,8.000366,8.201366,8.400388,8.600608,8.800721,9.000836,9.201059,9.400097,9.600214,9.800436,10.000480,10.200220,10.401080,10.600410,10.801000,11.000540,11.200360,11.400630,11.600890,11.800970,12.000470,12.200870,12.400280,12.600510,12.800580,13.000930,13.200970,13.400360,13.600770,13.800940,14.000620,14.200580,14.400310,14.600780,14.800920,15.000270,15.201070,15.400440,15.601250,15.800960,16.000811,16.200911,16.400881,16.600889,16.800871,17.000610,17.200230,17.401091,17.600750,17.801380,18.000330,18.201050,18.400511,18.600651,18.800631,19.000999,19.200621,19.400570,19.600691,19.801310,20.000019,20.201290,20.400681,20.601021,20.800550,21.000019,21.201290,21.401300,21.601391,21.800150,22.000690,22.200190,22.401220,22.601110,22.800800,23.000870,23.199329,23.400009,23.601431,23.801630,24.001089,24.201429,24.400999,24.600809,24.800770,25.001240,25.201370,25.401110,25.600710,25.800249,26.001499,26.200220,26.400999,26.600361,26.800220,27.000669,27.200199,27.400721,27.600700,27.800529,28.000549,28.201059,28.400379,28.600250,28.800610,29.000940,29.201260,29.401461,29.601570,29.800020,30.000469,30.200920,30.401190,30.600910,30.801371,31.000820,31.201670,31.400290,31.600870,31.800489,32.000080,32.200150,32.401772,32.601768,32.801140,33.001659,33.201172,33.401489,33.601330,33.800812,34.000031,34.201191,34.400509,34.601799,34.801239,35.000710,35.201939,35.401539,35.600491,35.800011,36.001179,36.200508,36.401669,36.601151,37.002239,37.200298,37.400860,37.600910,37.801060,38.002048,38.202271,38.400440,38.600750,38.800800,39.001869,39.201832,39.400372,39.601131,39.801640,40.001270,40.201302,40.401291,40.602200,40.801331,41.000301,41.202320,41.402199,41.601601,41.801998,42.000099,42.201080,42.401718,42.602112,42.802132,43.001770,43.201141,43.400372,43.602150,43.801262,44.000370,44.202530,44.402100,44.601501,44.801128,45.000851,45.202709,45.400719,45.601398,45.801899,46.002682,46.200329,46.400520,46.600491,46.800758,47.001560,47.202671,47.400970,47.601959,47.800072,48.000992,48.201801,48.402370,48.600040,48.801289,49.000832,49.201920,49.402580,49.600670,49.802891,50.001659,50.201641,50.402611,50.601131,50.800621,51.001572,51.201321,51.400612,51.602951,51.800121,52.004520,52.200821,52.404381,52.602211,52.801350,53.003799,53.204601,53.403629,53.605251,53.803841,54.001530,54.201790,54.404308,54.603378,54.801201,55.005932,55.203331,55.403500,55.601631,55.803162,56.001282,56.205811,56.405861,56.600491,56.801022,57.000000,57.201611,57.404819,57.602760,57.801701,58.004829,58.206242,58.406368,58.603241,58.805630,59.006470,59.202621,59.403790,59.601742,59.802662,60.000381,60.206242,60.403721,60.603889,60.802158,61.004768,61.206032,61.402390,61.601151,61.805340,62.002651,62.200771,62.402611,62.605061,62.805569,63.004459,63.205158,63.405041,63.601059,63.800758,64.003288,64.205467,64.401367,64.600456,64.804993,65.002083,65.200272,65.401009,65.603958,65.804443,66.002541,66.205643,66.402496,66.601921,66.802719,67.005676,67.203781,67.404808,67.806664,68.006638,68.203407,68.402649,68.603104,68.803772,69.005661,69.200188,69.403580,69.604523,69.806351,70.006630,70.202888,70.402359,70.600258,70.804810,71.003090,71.203217,71.405128,71.605652,71.801682,72.005753,72.202477,72.407043,72.603081,72.802147,73.004700,73.203552,73.407089,73.604141,73.803131,74.000969,74.202316,74.400917,74.604721,74.806709,75.002480,75.205261,75.402122,75.603790,75.807411,76.001549,76.205399,76.404991,76.602280,76.807549,77.007362,77.204857,77.403526,77.600182,77.800308,78.006958,78.207268,78.400642,78.607780,78.805450,79.003937,79.201851,79.401466,79.600792,79.800369,80.002289,80.200401,80.401398,80.605202,80.807190,81.002647,81.201141,81.405571,81.604813,81.801727,82.003723,82.200600,82.400146,82.600517,82.804352,83.003639,83.207642,83.406616,83.603752,83.804008,84.002823,84.204811,84.403297,84.604698,84.801331,85.000702,85.203621,85.400322,85.604729,85.802528,86.002113,86.200958,86.405891,86.603348,86.801521,87.000641,87.201912,87.405144,87.603027,87.804939,88.002487,88.205437,88.401779,88.606087,88.806831,89.005608,89.202927,89.401840,89.602386,89.802078,90.006264,90.201248,90.401360,90.604027,90.805023,91.005592,91.205383,91.403938,91.601311,91.804207,92.001602,92.206253,92.405052,92.603172,93.001984,93.203079,93.402390,93.600883,93.805313,94.002708,94.203934,94.401756,94.607193,94.800491,95.003220,],[1.600125,1.800028,2.000064,2.200194,2.400401,2.600747,2.800610,3.000543,3.200559,3.400730,3.600223,3.800869,4.000069,4.200485,4.400464,4.600847,4.800662,5.000101,5.200621,5.400828,5.600345,5.800630,6.000680,6.200761,6.400095,6.600367,6.800289,7.000824,7.200775,7.401076,7.601613,7.801388,8.000166,8.200231,8.400355,8.801195,9.001924,9.201775,9.401397,9.602159,9.800857,10.001050,10.200080,10.402910,10.601340,10.800060,11.002320,11.200950,11.403230,11.603570,11.800320,12.004370,12.204250,12.404060,12.603720,12.802300,13.004380,13.200620,13.402760,13.600900,13.800690,14.001950,14.202140,14.401320,14.600520,14.802310,15.002070,15.200260,15.403240,15.602700,15.800990,16.004200,16.202499,16.403139,16.602760,16.801809,17.003380,17.203230,17.402420,17.602461,17.800900,18.003571,18.203171,18.402691,18.602659,18.801979,19.001129,19.200769,19.404690,19.604330,19.805660,20.004000,20.200529,20.402290,20.604059,20.803181,21.001699,21.201700,21.402100,21.601910,21.802839,22.004070,22.203051,22.401310,22.605230,22.804100,23.003281,23.204090,23.401140,23.603689,23.802500,24.002331,24.202250,24.402229,24.605810,24.805460,25.003210,25.204679,25.402700,25.604290,25.802441,26.005199,26.201929,26.401190,26.602539,26.800819,27.004761,27.204790,27.404640,27.605009,27.803200,28.002930,28.201620,28.402849,28.600201,28.801340,29.000811,29.202620,29.401890,29.601391,29.804859,30.005211,30.202339,30.406240,30.603750,30.801130,31.005619,31.203671,31.406780,31.603901,31.800920,32.001709,32.203381,32.404362,32.603031,32.805691,33.004822,33.201450,33.403919,33.603008,33.802219,34.007408,34.207722,34.407021,34.606201,34.803230,35.003040,35.201469,35.406132,35.600449,35.804470,36.006569,36.203018,36.401112,36.602299,36.806221,37.000858,37.202240,37.403019,37.603420,37.804600,38.000050,38.205860,38.405060,38.601089,38.802368,39.000469,39.200439,39.401569,39.602032,39.800251,40.003769,40.200401,40.402889,40.602558,40.802319,41.004570,41.202641,41.403061,41.603958,41.803791,42.000790,42.200920,42.404530,42.603760,42.803890,43.001160,43.204941,43.401760,43.600189,43.800758,44.000179,44.200260,44.400028,44.599998,44.800129,45.000038,45.200081,45.400070,45.600021,45.800079,46.000019,46.200119,46.400040,46.600128,46.800079,47.000118,47.200851,47.401291,47.603500,47.804111,48.003010,48.200531,48.403061,48.600960,48.800270,49.000278,49.202702,49.403351,49.602039,49.800171,50.004921,50.203579,50.403358,50.601940,50.804180,51.002911,51.203941,51.400330,51.600498,51.800179,52.005970,52.202991,52.400169,52.601921,52.803341,53.001240,53.201382,53.406078,53.604530,53.804470,54.005249,54.203999,54.404461,54.602200,54.802021,55.006229,55.201092,55.402550,55.603069,55.800831,56.003139,56.206081,56.401421,56.602879,56.805729,57.006721,57.205029,57.401829,57.601822,57.805828,58.001869,58.204990,58.405819,58.603588,58.802898,59.000050,59.200062,59.400120,59.600250,59.800140,60.000061,60.200020,60.400051,60.600208,60.800159,61.000210,61.200630,61.400311,61.601051,61.800869,62.003761,62.206081,62.404610,62.604939,62.803478,63.004990,63.204731,63.401852,63.607170,63.806438,64.002220,64.203011,64.401016,64.600662,64.803612,65.003616,65.204277,65.406548,65.601723,65.801689,66.003113,66.400146,66.606216,66.802597,67.006523,67.203659,67.402679,67.604248,67.800911,68.000313,68.200050,68.400162,68.599998,68.800056,69.000076,69.200081,69.400368,69.600372,69.801048,70.000328,70.200310,70.400124,70.600227,70.803589,71.001602,71.204903,71.403328,71.607437,71.800179,72.001968,72.200790,72.404587,72.603622,72.801323,73.003441,73.205078,73.403152,73.605293,73.806717,74.004631,74.204170,74.401550,74.604080,74.802933,75.003181,75.202713,75.401352,75.604881,75.804062,76.007660,76.202797,76.401001,76.601898,76.802071,77.004791,77.202797,79.004433,79.802910,80.001869,80.203758,80.406448,80.601021,80.801331,81.003868,81.206146,81.400352,81.604980,81.800987,82.000343,82.202927,82.406631,82.601631,82.800682,83.004700,83.200104,83.402809,83.605003,83.802460,84.002762,84.207489,84.400917,84.603699,84.800720,85.002777,85.206253,85.403732,85.601540,85.807007,86.006828,86.200111,86.403801,86.604584,86.807632,87.006378,87.206902,87.400688,87.603371,87.806122,88.006706,88.201523,88.403763,88.603531,88.802696,89.007080,89.203217,89.400871,89.600868,89.803688,90.006088,90.203117,90.406898,90.600792,90.801971,91.003891,92.800034,93.000038,93.200012,93.400009,93.600060,93.800034,94.000031,94.200012,94.400017,94.600037,94.800011,95.000053,95.200012,95.400017,95.600014,95.800102,96.000031,96.200050,96.400063,96.600029,96.800034,97.000031,97.200050,97.400101,97.600098,97.800087,98.000076,98.200012,98.400040,98.600052,98.800049,99.000298,99.200256,99.401917,99.603058,99.800049,100.000000,100.200897,100.405502,100.600899,100.805603,101.003998,101.200104,101.405403,101.604500,101.801003,102.000000,102.200104,102.400101,102.599998,102.800003,103.000000,],[0.000000,0.200073,0.400134,0.600144,0.800001,1.000191,1.200156,1.400058,1.600347,1.800375,2.000199,2.200236,2.400563,2.600344,2.800553,3.000454,3.200734,3.400959,3.600297,3.800898,4.000213,4.201514,4.400310,4.600589,4.800578,5.000781,5.201348,5.400437,5.600261,5.800755,6.001462,6.201412,6.400086,6.600913,6.800094,7.000532,7.201875,7.401775,7.601096,7.800191,8.000851,8.201562,8.401699,8.600328,8.800435,9.001417,9.201457,9.401075,9.600078,9.800990,10.000240,10.200060,10.400750,10.600570,10.800600,11.001160,11.200270,11.400860,11.600710,11.800860,12.000950,12.200830,12.400370,12.600410,12.800950,13.000100,13.200550,13.401110,13.600530,13.800820,14.001210,14.200200,14.400470,14.600860,14.800830,15.001110,15.200090,15.400440,15.600570,15.800480,16.000290,16.200670,16.400970,16.601040,16.800550,17.000830,17.200850,17.400200,17.600550,17.800791,18.000071,18.200029,18.400000,18.600960,18.800840,19.001261,19.200720,19.400249,19.601110,19.800301,20.000071,20.200701,20.400249,20.601139,20.800650,21.000320,21.200590,21.400881,21.600479,21.800310,22.000570,22.201200,22.400940,22.600439,22.800619,23.000240,23.200529,23.400921,23.600300,23.801130,24.000019,24.200380,24.400841,24.600700,24.800159,25.000570,25.201180,25.401039,25.601200,25.800520,26.000139,26.200251,26.400761,26.601061,26.800711,27.000469,27.201210,27.401110,27.600929,27.800200,28.000160,28.200081,28.400330,28.600550,28.800600,29.000401,29.200439,29.400820,29.600050,29.800131,30.000570,30.201380,30.401011,30.601360,30.800270,31.001270,31.200809,31.400961,31.600800,31.800791,32.000221,32.200211,],[0.000000,0.200154,0.400006,0.600116,0.800048,1.000012,1.200060,1.400069,1.600226,1.800211,2.000141,2.200019,2.400020,2.600054,2.800207,3.000176,3.200170,3.400220,3.600507,3.800412,4.000340,4.200538,4.400443,4.600216,4.800574,5.000318,5.200426,5.400935,5.600382,5.800916,6.000905,6.200501,6.400429,6.600478,6.800139,7.000370,7.200124,7.400420,7.600018,7.800383,8.000057,8.200809,8.400466,8.600183,8.800580,9.000788,9.200377,9.400550,9.600032,9.800723,10.000120,10.200240,10.400580,10.600610,10.800420,11.000720,11.200580,11.400160,11.600140,11.800720,12.000610,12.200340,12.400580,12.600450,12.800330,13.000320,13.200760,13.400260,13.600620,13.800680,14.000330,14.200070,14.400570,14.600800,14.800930,15.000000,15.201030,15.400490,15.600070,15.800700,16.000299,16.200020,16.400721,16.600990,16.801081,17.000099,17.200689,17.400040,17.600691,17.800930,18.000429,18.200060,18.400780,18.601080,18.800911,19.001051,19.200621,19.401020,19.600420,19.800159,20.000860,20.201130,20.400511,20.600309,20.801090,21.000111,21.200050,21.400181,21.600281,21.800060,22.000280,22.200100,22.400631,22.600149,22.800940,23.000111,23.200670,23.401020,23.600410,23.800310,24.000879,24.200600,24.400049,24.601139,24.801029,25.000580,25.200050,25.400240,25.600050,25.800720,26.000340,26.200630,26.400709,26.600870,26.800501,27.000299,27.200569,27.400869,27.600050,27.801201,28.000360,28.200581,28.400650,28.600901,28.800640,29.000851,29.200371,29.400620,29.601200,29.801371,30.000879,30.202681,30.400009,30.602659,30.802200,31.002760,31.203119,31.402460,31.602871,32.002449,32.200180,32.400742,32.604370,32.802448,33.001411,33.201439,33.400780,33.603230,33.803749,34.003220,34.401588,34.601101,34.803059,],[0.000000,0.200073,0.400134,0.600144,0.800172,1.000252,1.200147,1.400129,1.600283,1.800073,2.000459,2.200123,2.400135,2.600614,2.800738,3.000075,3.200284,3.400536,3.600257,3.800697,4.001079,4.200935,4.401108,4.601074,4.801193,5.000808,5.200139,5.401088,5.601743,5.801222,6.000442,6.200693,6.400961,6.601293,6.801468,7.000510,7.201135,7.400309,7.601309,7.800292,8.000453,8.200391,8.400240,8.600514,8.800514,9.000480,9.200813,9.400975,9.600557,10.001080,10.201080,10.401060,10.600410,10.800670,11.000040,11.200950,11.400320,11.600480,11.800000,12.000200,12.200460,12.401190,12.601180,12.801350,13.000470,13.201170,13.400550,13.601370,13.801250,14.000300,14.201030,14.400900,14.601450,14.801450,15.001460,15.200200,15.401150,15.600410,15.800870,16.000700,16.200199,16.401350,16.600260,16.801430,17.000891,17.200750,17.401390,17.601410,17.801090,18.001329,18.200911,18.401360,18.600189,18.800690,19.001301,19.201099,19.400810,19.601509,19.800779,20.001320,20.200300,20.400410,20.600941,20.800890,21.001080,21.200930,21.401039,21.600389,21.800079,22.000071,22.200590,22.400690,22.600660,22.801380,23.001431,23.201111,23.400299,23.600220,23.800659,24.001040,24.200899,24.400970,24.600500,24.801470,25.000521,25.200159,25.400200,25.600349,25.801149,26.000179,26.201160,26.400761,26.600260,26.800650,27.000401,27.200741,27.400471,27.600809,27.800381,28.001040,28.200661,28.400970,28.600241,28.800760,29.000931,29.200319,29.400789,29.600130,29.800159,30.000540,30.200911,30.401520,30.600090,30.801310,31.001209,31.201420,31.400030,31.600389,31.800470,32.001270,32.201199,32.400429,32.600399,32.800289,33.001431,33.200111,33.401310,33.601501,33.801521,34.001221,34.201000,34.401039,34.601292,34.801441,35.001240,35.200829,],[0.000000,0.200154,0.400006,0.600116,0.800076,1.000077,1.200194,1.400032,1.600164,1.800105,2.000355,2.200021,2.400414,2.600510,2.800136,3.000526,3.200375,3.400851,3.600830,3.800105,4.000725,4.200926,4.400324,4.600666,4.800444,5.000974,5.200184,5.400961,5.600088,5.800481,6.001275,6.201126,6.401058,6.600108,6.800096,7.000792,7.201261,7.400202,7.600652,7.800856,8.000509,8.200566,8.400854,8.600676,8.800624,9.000776,9.200256,9.400260,9.600083,9.800853,10.000420,10.200020,10.400340,10.600760,10.800840,11.000430,11.200670,11.400250,11.600780,11.800140,18.400869,18.601030,18.800650,19.000280,19.200510,19.400700,19.600849,19.800350,20.000040,20.200069,20.400909,20.600660,20.800671,21.000271,21.200109,21.400721,21.600130,21.800140,22.000940,22.200251,22.400160,22.600210,22.800430,23.000601,23.200649,23.401051,23.600149,23.800171,24.000160,24.400749,24.600300,24.800591,25.000010,25.200081,25.400190,25.600140,25.800930,26.001141,26.200371,26.400379,26.600121,26.800930,27.000530,27.200020,27.400480,27.600740,27.800310,28.000050,28.200211,28.400890,28.600121,28.801069,29.000040,29.200470,29.401220,29.601021,29.800140,30.000650,30.200399,30.400591,30.600040,30.801020,31.000740,31.200510,31.400511,31.600780,31.800020,32.000278,32.200642,32.401421,32.601250,32.800709,33.001240,33.201172,33.400082,33.601219,33.800018,34.000542,34.201130,34.400822,34.601070,34.800308,35.000359,35.200932,35.400650,35.601200,35.800072,36.000229,36.200401,36.401031,36.600700,36.800579,37.000881,37.200562,37.400478,37.601200,37.800739,38.000881,38.200890,38.400021,38.600700,38.800091,39.000961,39.201248,39.401310,39.601391,39.801022,40.000671,40.201118,40.400921,40.601318,40.800880,41.000938,41.200459,41.401199,41.600208,41.802479,42.002892,42.203381,42.403358,42.603371,42.800781,43.000401,43.203041,43.403049,43.602509,43.800129,44.002048,44.201721,44.400761,44.602810,44.803051,45.001888,45.200569,45.400318,45.602291,45.802410,46.002129,46.200180,46.401569,46.602711,46.800900,47.002441,47.200871,47.401138,47.600208,47.803150,48.001511,48.201832,48.403412,48.601109,48.802448,49.002289,49.202019,49.403591,49.602928,49.801571,50.003448,50.203072,50.400742,50.600449,50.800930,51.002930,51.201221,51.401089,51.602150,51.803139,52.000912,52.203571,52.402088,52.601990,52.801239,53.001389,53.201462,53.404259,53.603439,53.803268,54.003819,54.203758,54.401169,54.603809,54.804501,55.004299,55.203548,55.401039,55.600590,55.804169,56.004162,56.200569,56.404388,56.601551,56.800678,57.003109,57.204170,57.403721,57.602951,57.803101,58.001389,58.203651,58.403809,58.603310,58.803452,59.002869,59.202721,59.401070,],]
    matrix.resample_time(100)
    matrix.to_file('datasets/asteroids.json')


def prepare_wildfire_dataset():
    # These runs are synchronized by default.
    load_vsm('data/similarity_wildfire_magnitude_uvw_281250.vsm').to_file('datasets/wildfire_uvw_mag.json')


def prepare_asevis_dataset():
    matrix = load_asevis('data/asevis_filtered', 300, 3)
    matrix.resample_time(100)
    matrix.to_file('datasets/asevis_filtered.json')


def prepare_illustrative_dataset(num_time_steps):
    global loop_curve
    reference_has_feature = False
    xs = np.linspace(-1, 1, num=num_time_steps)
    ys = [-1] * num_time_steps
    points = np.column_stack((xs, ys))
    loop_curve = points.T
    # loop_curve = generate_loop_curve(num_time_steps).T
    loop_curve = generate_bump_curve(num_time_steps, h=0.2, l=0.2).T
    # loop_curve[0,:] += 0.5
    # init_debug_parallel(num_time_steps, reference_has_feature).to_file('datasets/debug_parallel.json')
    init_illustrative_dataset(num_time_steps, noise=0.01).to_file('datasets/illustrative_dataset.json')


def preprocessing():
    #init_toy_2D().to_file('datasets/toy_2D.json')
    #init_toy_3D().to_file('datasets/toy_3D.json')

    # Way too many runs, do not use!
    # load_ucl_har('/home/spider/Desktop/vmv/UCI HAR Dataset').to_file('datasets/uci_har.json')

    prepare_illustrative_dataset(num_time_steps=100)
    prepare_asevis_dataset()
    prepare_ph_data()
    prepare_asteroid_dataset()
    prepare_wildfire_dataset()


if __name__ == '__main__':
    # This will convert the datasets to the json format used by the application
    preprocessing()
